require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const bcrypt = require('bcryptjs');
const cors = require('cors');
const User = require('./models/User');
const Expiration = require('./models/Expiration');
const { bot } = require('./utils/telegram');
const crypto = require('crypto');
const http = require('http');
const { sendWhatsAppMessage } = require('./utils/whatsapp');
const multer = require('multer');
const app = express();
const PORT = process.env.PORT || 8000;
const Video = require('./models/Video'); 
const server = http.createServer(app);
const ffmpeg = require('fluent-ffmpeg');
const path = require('path');
const os = require('os');
const { GridFSBucket } = require('mongodb');
const Setting = require('./models/Setting');
const cluster = require('cluster');
const { Worker } = require('worker_threads');
const fs = require('fs');

// Configuration optimis√©e du stockage avec cache en m√©moire
const storage = multer.memoryStorage();
const upload = multer({
  storage: storage,
  limits: { fileSize: 500 * 1024 * 1024 } // 500MB pour √©viter les timeouts
});

// Cache en m√©moire pour les vid√©os fr√©quemment acc√©d√©es
const videoCache = new Map();
const CACHE_SIZE = 50; // Nombre max de vid√©os en cache
const CACHE_TTL = 30 * 60 * 1000; // 30 minutes

// Queue pour traitement asynchrone des vid√©os
const videoProcessingQueue = [];
let isProcessing = false;

const swaggerUi = require('swagger-ui-express');
const YAML = require('yamljs');
const swaggerDocument = YAML.load('./swagger.yml');

let gridFSBucketVideo;
let gridFSBucketImage;

// Middleware CORS optimis√©
const corsOptions = {
  origin: 'https://kaboretech.cursusbf.com',
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true,
  preflightContinue: false,
  optionsSuccessStatus: 204
};

app.use(cors(corsOptions));
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// Configuration optimis√©e du body parser
app.use(bodyParser.json({ limit: '200mb' }));
app.use(bodyParser.urlencoded({ limit: '200mb', extended: true }));

// Connexion MongoDB optimis√©e avec pool de connexions
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  maxPoolSize: 20, // Pool de 20 connexions max
  minPoolSize: 5,  // Pool de 5 connexions min
  maxIdleTimeMS: 30000,
  serverSelectionTimeoutMS: 5000,
  bufferMaxEntries: 0,
  bufferCommands: false,
})
  .then(() => {
    console.log('‚úÖ Connexion √† MongoDB r√©ussie');
    
    // Initialisation de GridFS avec options optimis√©es
    gridFSBucketVideo = new GridFSBucket(mongoose.connection.db, { 
      bucketName: 'videos',
      chunkSizeBytes: 1024 * 255 // Chunks plus petits pour streaming plus rapide
    });
    gridFSBucketImage = new GridFSBucket(mongoose.connection.db, { 
      bucketName: 'images',
      chunkSizeBytes: 1024 * 255
    });

    // Pr√©charger les vid√©os populaires en cache
    preloadPopularVideos();
  })
  .catch(err => {
    console.error('‚ùå Connexion √† MongoDB √©chou√©e:', err.message);
    console.error('D√©tails de l\'erreur:', err);
  });

// Fonction pour pr√©charger les vid√©os populaires
async function preloadPopularVideos() {
  try {
    const popularVideos = await Video.find()
      .sort({ views: -1, createdAt: -1 })
      .limit(20);
    
    console.log(`üì¶ Pr√©chargement de ${popularVideos.length} vid√©os populaires en cache`);
  } catch (error) {
    console.error('Erreur pr√©chargement cache:', error);
  }
}

// Fonction pour nettoyer le cache
function cleanCache() {
  const now = Date.now();
  for (const [key, value] of videoCache) {
    if (now - value.timestamp > CACHE_TTL) {
      videoCache.delete(key);
    }
  }
  
  // Limiter la taille du cache
  if (videoCache.size > CACHE_SIZE) {
    const entries = Array.from(videoCache.entries());
    const toDelete = entries.slice(0, entries.length - CACHE_SIZE);
    toDelete.forEach([key] => videoCache.delete(key));
  }
}

// Nettoyer le cache toutes les 5 minutes
setInterval(cleanCache, 5 * 60 * 1000);

mongoose.connection.on('error', (err) => {
  console.error('‚ùå Erreur de connexion √† MongoDB:', err.message);
});

bot.launch();

// Routes existantes conserv√©es...
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/api/screen-capture', async (req, res) => {
  try {
    const setting = await Setting.findOne({ key: 'allowScreenCapture' });
    if (!setting) {
      return res.json({ allowScreenCapture: false });
    }
    res.json({ allowScreenCapture: setting.value });
  } catch (error) {
    console.error('Erreur r√©cup√©ration config screenCapture:', error);
    res.status(500).json({ message: 'Erreur serveur' });
  }
});

app.post('/api/screen-capture', async (req, res) => {
  const { allowScreenCapture } = req.body;

  if (typeof allowScreenCapture !== 'boolean') {
    return res.status(400).json({ message: 'Le champ allowScreenCapture doit √™tre un bool√©en' });
  }

  try {
    const setting = await Setting.findOneAndUpdate(
      { key: 'allowScreenCapture' },
      { value: allowScreenCapture },
      { new: true, upsert: true }
    );

    res.status(200).json({ message: 'Configuration mise √† jour', allowScreenCapture: setting.value });
  } catch (error) {
    console.error('Erreur mise √† jour config screenCapture:', error);
    res.status(500).json({ message: 'Erreur serveur' });
  }
});

// Fonction de compression vid√©o optimis√©e avec Worker Threads
const compressVideoOptimized = (inputBuffer, quality = 'medium') => {
  return new Promise((resolve, reject) => {
    const outputPath = path.join(os.tmpdir(), `compressed-${Date.now()}.mp4`);
    const inputPath = path.join(os.tmpdir(), `input-${Date.now()}.mp4`);
    
    // √âcrire le buffer en fichier temporaire
    fs.writeFileSync(inputPath, inputBuffer);

    let videoSettings;
    switch(quality) {
      case 'low':
        videoSettings = { size: '854x480', videoBitrate: '500k' };
        break;
      case 'high':
        videoSettings = { size: '1920x1080', videoBitrate: '2000k' };
        break;
      default: // medium
        videoSettings = { size: '1280x720', videoBitrate: '1000k' };
    }

    ffmpeg(inputPath)
      .output(outputPath)
      .videoCodec('libx264')
      .audioCodec('aac')
      .size(videoSettings.size)
      .videoBitrate(videoSettings.videoBitrate)
      .audioFrequency(44100)
      .audioChannels(2)
      .format('mp4')
      .outputOptions([
        '-preset fast',        // Compression plus rapide
        '-crf 23',            // Qualit√© constante
        '-movflags +faststart' // Optimisation pour streaming
      ])
      .on('end', () => {
        // Nettoyer le fichier d'entr√©e
        fs.unlinkSync(inputPath);
        resolve(outputPath);
      })
      .on('error', (err) => {
        // Nettoyer les fichiers temporaires
        try {
          fs.unlinkSync(inputPath);
          if (fs.existsSync(outputPath)) fs.unlinkSync(outputPath);
        } catch {}
        reject(err);
      })
      .run();
  });
};

// Fonction pour traiter la queue des vid√©os
async function processVideoQueue() {
  if (isProcessing || videoProcessingQueue.length === 0) return;
  
  isProcessing = true;
  console.log(`üé¨ Traitement de ${videoProcessingQueue.length} vid√©os en queue`);

  while (videoProcessingQueue.length > 0) {
    const videoJob = videoProcessingQueue.shift();
    try {
      await processVideoInBackground(videoJob);
    } catch (error) {
      console.error('Erreur traitement vid√©o:', error);
    }
  }
  
  isProcessing = false;
}

// Fonction pour traiter une vid√©o en arri√®re-plan
async function processVideoInBackground({ videoId, videoBuffer, quality = 'medium' }) {
  try {
    console.log(`üé¨ D√©but compression vid√©o ${videoId}`);
    
    // Compression de la vid√©o
    const compressedPath = await compressVideoOptimized(videoBuffer, quality);
    const compressedBuffer = fs.readFileSync(compressedPath);
    
    // Mise √† jour en base avec la version compress√©e
    const compressedFileId = await storeFileInGridFSOptimized(
      { buffer: compressedBuffer, originalname: `compressed_${videoId}.mp4`, mimetype: 'video/mp4' },
      gridFSBucketVideo
    );

    // Mise √† jour du document vid√©o
    await Video.findByIdAndUpdate(videoId, {
      compressedFileId,
      isProcessed: true,
      processedAt: new Date()
    });

    // Nettoyer le fichier temporaire
    fs.unlinkSync(compressedPath);
    
    console.log(`‚úÖ Vid√©o ${videoId} trait√©e avec succ√®s`);
  } catch (error) {
    console.error(`‚ùå Erreur traitement vid√©o ${videoId}:`, error);
    
    // Marquer comme √©chou√©
    await Video.findByIdAndUpdate(videoId, {
      processingFailed: true,
      processedAt: new Date()
    });
  }
}

// Routes d'authentification optimis√©es (conserv√©es de l'original)
app.post('/register', async (req, res) => {
  const { name, phone, password } = req.body;

  try {
    let formattedPhone = phone.trim();
    
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({
      name,
      phone: formattedPhone,
      password: hashedPassword,
      isInformatiqueHardware: false,
      isInformatiqueSoftware: false,
      isBureautiqueHardware: false,
      isBureautiqueSoftware: false,
      isMarketingSocial: false,
      isMarketingContent: false,
      isVIPGsmHardware: false,
      isVIPGsmSoftware: false,
    });
    await newUser.save();

    // Messages Telegram et WhatsApp (code existant conserv√©)
    const formations = [
      { type: 'Informatique', price: '30 000 FCFA', parts: ['Hardware', 'Software'] },
      { type: 'Bureautique', price: '10 000 FCFA', parts: ['Hardware', 'Software'] },
      { type: 'Marketing', price: '10 000 FCFA', parts: ['Social', 'Content'] },
      { type: 'GSM', price: '30 000 FCFA', parts: ['Hardware', 'Software'] },
    ];

    let telegramMessage = `üë§ *Nouvel utilisateur inscrit* :\nüìõ *Nom* : ${name}\nüìû *T√©l√©phone* : ${formattedPhone}\n\nBienvenue parmi nous ! Voici les services que vous pouvez souscrire, chacun peut √™tre pay√© par partie. Veuillez valider ou annuler les formations demand√©es par cet utilisateur :\n`;

    formations.forEach((formation, index) => {
      telegramMessage += `\nüíº *${formation.type}* : ${formation.price}`;
    });

    const inlineKeyboard = formations.map((formation) => {
      return formation.parts.map((part) => {
        return [
          { 
            text: `‚úÖ ${formation.type} - ${part}`, 
            callback_data: `validate_${formation.type}_${part}_${newUser._id}`
          },
          { 
            text: `‚ùå ${formation.type} - ${part}`, 
            callback_data: `reject_${formation.type}_${part}_${newUser._id}`
          }
        ];
      });
    }).flat();

    await bot.telegram.sendMessage(process.env.CHAT_ID, telegramMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: inlineKeyboard,
      },
    });

    let formationsMessage = 'Voici nos diff√©rentes formations et leurs prix :\n\n';
    formations.forEach(formation => {
      formationsMessage += `üíº *${formation.type}* : ${formation.price}\n`;
    });

    const whatsappMessage = `üéâ *Bonjour ${name}* üëã\n\n*Bienvenue chez Kaboretech* üáßüá´\n\nNous vous remercions de vous √™tre inscrit. Vous √™tes d√©sormais membre de notre communaut√© et nous sommes ravis de vous accompagner dans votre parcours.\n\nVoici les formations disponibles pour vous, chaque formation peut √™tre pay√©e par "part" :\n\n${formationsMessage}\nüëâ ORANGEüëâ MOOV üëâ UBA     üëâwaveüëâWestern Unions\n\nüëâ Nom: kabore\nüëâ Pr√©nom : Dominique\nüëâ Pays : Burkina Faso\nüëâ Ville : Hound√©\n\nüëâOrange (+226) 74391980\nüëâWave +226 74 39 19 80\nüëâ Moov (+226) 02180425\n\nüëâ Western Unions\nKabore Dominique\nHound√© Burkina Faso\n+226 74 39 19 80\n\nüëâ UBA  415800007247\nüëâID Binance: 776174244\n\n\nPossibilit√© de payer en deux tranches   \n\n\nApr√®s payement Veillez nous signal√©‚úçÔ∏è   Avec capture d'√©cran\n\nLes informations a fournir c'est nom, pr√©nom  , date et lieu de naissance\n\nCordialement,\n*L'√©quipe Kabore Tech* üíºüöÄ`;

    await sendWhatsAppMessage(formattedPhone, whatsappMessage);

    res.status(201).json({ message: 'En attente de validation VIP' });
  } catch (error) {
    console.error('Erreur inscription:', error);
    res.status(500).json({ message: 'Erreur d\'inscription' });
  }
});

// Routes d'authentification existantes conserv√©es...
app.post('/api/login', async (req, res) => {
  const { phone, password } = req.body;
  let formattedPhone = phone.trim();

  try {
    const user = await User.findOne({ phone: formattedPhone });

    if (!user) return res.status(404).json({ message: 'Utilisateur non trouv√©' });

    const validPass = await bcrypt.compare(password, user.password);
    if (!validPass) return res.status(401).json({ message: 'Mot de passe incorrect' });

    res.status(200).json({
      message: 'Connexion r√©ussie',
      user: {
        name: user.name,
        phone: user.phone,
        price: user.price,
        vipStatus: {
          informatique: user.isVIPInformatique,
          marketing: user.isVIPMarketing,
          energie: user.isVIPEnergie,
          reparation: user.isVIPReparation,
        }
      }
    });
  } catch (error) {
    res.status(500).json({ message: 'Erreur de connexion' });
  }
});

// Actions bot Telegram et autres routes existantes conserv√©es...
bot.action(/validate_(Informatique|Marketing|Bureautique|GSM)_(Hardware|Software|Social|Content)_([0-9a-fA-F]{24})/, async (ctx) => {
  const [_, formationType, part, userId] = ctx.match;

  const vipFieldMap = {
    'Informatique_Hardware': 'isInformatiqueHardware',
    'Informatique_Software': 'isInformatiqueSoftware',
    'Bureautique_Hardware': 'isBureautiqueHardware',
    'Bureautique_Software': 'isBureautiqueSoftware',
    'Marketing_Social': 'isMarketingSocial',
    'Marketing_Content': 'isMarketingContent',
    'GSM_Hardware': 'isVIPGsmHardware',
    'GSM_Software': 'isVIPGsmSoftware'
  };

  const vipField = vipFieldMap[`${formationType}_${part}`];

  try {
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return ctx.answerCbQuery('‚ùå ID utilisateur invalide');
    }

    const user = await User.findById(userId);
    if (!user) {
      return ctx.answerCbQuery('‚ùå Utilisateur introuvable');
    }

    if (user[vipField]) {
      return ctx.answerCbQuery(`‚ùå Cette section est d√©j√† activ√©e pour l'utilisateur : ${formationType} - ${part}`);
    }

    await User.updateOne({ _id: userId }, { $set: { [vipField]: true } });

    await ctx.answerCbQuery('‚úÖ Section valid√©e avec succ√®s !');
    await ctx.editMessageText(`‚úÖ Statut ${formationType} - ${part} activ√© pour ${user.name}`);

    const whatsappMessage = `üéâ F√©licitations ${user.name} !\n\nVotre acc√®s VIP ${formationType} ${part} est maintenant actif. Nous vous remercions de votre inscription et vous souhaitons un excellent parcours avec Kaboretech !\n\nCordialement,\n*L'√©quipe Kabore Tech* üíºüöÄ`;
    await sendWhatsAppMessage(user.phone, whatsappMessage);

  } catch (error) {
    console.error('Erreur lors de la validation:', error);
    ctx.answerCbQuery('‚ùå Erreur lors de l\'activation du statut VIP');
  }
});

// Routes mot de passe oubli√©, etc. (conserv√©es de l'original)...
app.post('/api/forgot-password', async (req, res) => {
  const { phone } = req.body;

  try {
    const user = await User.findOne({ phone });

    if (!user) {
      return res.status(404).json({ message: 'Num√©ro de t√©l√©phone non trouv√©.' });
    }

    const otp = crypto.randomInt(100000, 999999).toString();
    const otpExpiresAt = new Date(Date.now() + 5 * 60 * 1000);

    user.otp = otp;
    user.otpExpiresAt = otpExpiresAt;
    await user.save();

    const message = `Votre code de r√©initialisation de mot de passe est : ${otp}. Ce code est valide pendant 5 minutes.`;

    await sendWhatsAppMessage(phone, message);

    res.status(200).json({ message: 'Code OTP envoy√© avec succ√®s.' });
  } catch (error) {
    console.error('Erreur lors de l\'envoi de l\'OTP :', error);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
});

app.post('/api/verify-otp', async (req, res) => {
  const { phone, otp } = req.body;

  try {
    const user = await User.findOne({ phone, otp });
    const validUser = user && user.otpExpiresAt > new Date();

    if (!validUser) {
      return res.status(400).json({ message: 'Code OTP invalide ou expir√©.' });
    }

    res.status(200).json({ message: 'Code OTP valid√© avec succ√®s. Vous pouvez maintenant r√©initialiser votre mot de passe.' });
  } catch (error) {
    console.error('Erreur lors de la v√©rification de l\'OTP :', error);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
});

app.post('/api/reset-password', async (req, res) => {
  const { phone, otp, newPassword } = req.body;

  try {
    const user = await User.findOne({ phone, otp });
    const validUser = user && user.otpExpiresAt > new Date();

    if (!validUser) {
      return res.status(400).json({ message: 'Code OTP invalide ou expir√©.' });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);

    user.password = hashedPassword;
    user.otp = null;
    user.otpExpiresAt = null;
    await user.save();

    res.status(200).json({ message: 'Mot de passe r√©initialis√© avec succ√®s.' });

    const message = `‚úÖ Votre mot de passe a √©t√© r√©initialis√© avec succ√®s.`;
    await sendWhatsAppMessage(user.phone, message);
  } catch (error) {
    console.error('Erreur lors de la r√©initialisation du mot de passe :', error);
    res.status(500).json({ message: 'Erreur interne du serveur.' });
  }
});

// Routes utilisateurs et statuts VIP (conserv√©es)...
app.get('/api/users', async (req, res) => {
  try {
    const users = await User.find({}, {
      name: 1,
      phone: 1,
      isInformatiqueHardware: 1,
      isInformatiqueSoftware: 1,
      isBureautiqueHardware: 1,
      isBureautiqueSoftware: 1,
      isMarketingSocial: 1,
      isMarketingContent: 1,
      isVIPGsmHardware: 1,
      isVIPGsmSoftware: 1,
      createdAt: 1
    }).sort({ createdAt: -1 });

    const formattedUsers = users.map(user => ({
      id: user._id,
      name: user.name,
      phone: user.phone,
      status: {
        informatiqueHardware: user.isInformatiqueHardware,
        informatiqueSoftware: user.isInformatiqueSoftware,
        bureautiqueHardware: user.isBureautiqueHardware,
        bureautiqueSoftware: user.isBureautiqueSoftware,
        marketingSocial: user.isMarketingSocial,
        marketingContent: user.isMarketingContent,
        gsmHardware: user.isVIPGsmHardware,
        gsmSoftware: user.isVIPGsmSoftware
      },
      createdAt: user.createdAt
    }));

    res.status(200).json({
      success: true,
      count: formattedUsers.length,
      users: formattedUsers
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des utilisateurs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la r√©cup√©ration des utilisateurs'
    });
  }
});

app.get('/api/vip-status', async (req, res) => {
  let { phone } = req.query;

  if (!phone) {
    return res.status(400).json({ message: 'Le num√©ro de t√©l√©phone est requis' });
  }

  phone = phone.trim();
  console.log(`Num√©ro de t√©l√©phone re√ßu : ${phone}`);

  if (!phone.startsWith('+')) {
    phone = '+' + phone;
  }

  console.log(`Recherche de l'utilisateur avec le num√©ro : ${phone}`);

  try {
    const user = await User.findOne({ phone: phone });

    if (!user) {
      console.log(`Utilisateur non trouv√© pour le num√©ro : ${phone}`);
      return res.status(404).json({ message: 'Utilisateur non trouv√©' });
    }

    console.log(`Utilisateur trouv√© pour le num√©ro : ${phone}`);

    const activeVipDomains = [];
    if (user.isInformatiqueHardware) activeVipDomains.push('Informatique Hardware');
    if (user.isInformatiqueSoftware) activeVipDomains.push('Informatique Software');
    if (user.isBureautiqueHardware) activeVipDomains.push('Bureautique Hardware');
    if (user.isBureautiqueSoftware) activeVipDomains.push('Bureautique Software');
    if (user.isMarketingSocial) activeVipDomains.push('Marketing Social');
    if (user.isMarketingContent) activeVipDomains.push('Marketing Content');
    if (user.isVIPGsmHardware) activeVipDomains.push('GSM Hardware');
    if (user.isVIPGsmSoftware) activeVipDomains.push('GSM Software');

    res.status(200).json({
      message: 'Statuts VIP r√©cup√©r√©s avec succ√®s',
      vipDomains: activeVipDomains
    });

  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des statuts VIP:', error);
    res.status(500).json({ message: 'Erreur interne lors de la r√©cup√©ration des statuts VIP' });
  }
});

app.post('/api/paiement', async (req, res) => {
  const { phone, numDepot, domaine, part, mode, price } = req.body;

  const validDomains = ['Informatique', 'Marketing', 'Bureautique', 'GSM'];
  const validParts = ['Hardware', 'Software', 'Social', 'Content'];

  if (!validDomains.includes(domaine) || !validParts.includes(part)) {
    return res.status(400).json({ message: 'Domaine ou partie invalide. V√©rifiez les options possibles.' });
  }

  const validModes = ['presentiel', 'ligne'];
  if (!validModes.includes(mode)) {
    return res.status(400).json({ message: 'Mode de paiement invalide. Les modes possibles sont : presentiel, ligne.' });
  }

  let formattedPhone = phone.trim();
  if (!formattedPhone.startsWith('+')) {
    formattedPhone = '+' + formattedPhone;
  }

  try {
    const user = await User.findOne({ phone: formattedPhone });

    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©' });
    }

    const isVipForPart = user[`is${domaine}${part}`] || false;
    if (isVipForPart) {
      return res.status(200).json({ message: 'Acc√®s VIP valid√©', isPaid: false });
    }

    const telegramMessage = `üì© *Nouveau Paiement Re√ßu*:\n\nüìù *Num√©ro de D√©p√¥t*: ${numDepot}\nüìû *Num√©ro d'Utilisateur*: ${formattedPhone}\nüíº *Domaine*: ${domaine}\nüß© *Partie*: ${part}\nüåê *Mode de Paiement*: ${mode}\nüí∞ *Prix*: ${price}\n\nVeuillez proc√©der √† la validation du paiement.`;

    await bot.telegram.sendMessage(process.env.CHAT_ID, telegramMessage, {
      parse_mode: 'Markdown'
    });

    res.status(200).json({ message: 'Paiement v√©rifi√© et message envoy√© sur Telegram.' });
  } catch (error) {
    console.error('Erreur lors de la v√©rification du paiement:', error);
    res.status(500).json({ message: 'Erreur interne lors de la v√©rification du paiement.' });
  }
});

// NOUVELLES ROUTES VID√âO OPTIMIS√âES

// Fonction optimis√©e pour stocker les fichiers dans GridFS
const storeFileInGridFSOptimized = (file, bucket) => {
  return new Promise((resolve, reject) => {
    const uploadStream = bucket.openUploadStream(file.originalname, {
      metadata: { 
        mimetype: file.mimetype,
        size: file.buffer.length,
        uploadDate: new Date()
      }
    });

    uploadStream.write(file.buffer);
    uploadStream.end();

    uploadStream.on('error', (err) => {
      reject(new Error('Erreur lors du t√©l√©chargement du fichier : ' + err.message));
    });

    uploadStream.on('finish', () => {
      resolve(uploadStream.id);
    });
  });
};

// Route optimis√©e pour ajouter une vid√©o avec traitement en arri√®re-plan
app.post('/api/add-video', upload.fields([{ name: 'videoFile', maxCount: 1 }, { name: 'imageFile', maxCount: 1 }]), async (req, res) => {
  const { title, categoryId, part, isPaid, description, quality = 'medium' } = req.body;

  try {
    // Validation rapide des fichiers
    if (!req.files.videoFile || !req.files.imageFile) {
      return res.status(400).json({ message: 'Les fichiers vid√©o et image sont requis.' });
    }

    const videoFile = req.files.videoFile[0];
    const imageFile = req.files.imageFile[0];

    // R√©ponse imm√©diate au client
    res.status(202).json({ 
      message: 'Vid√©o en cours de traitement. Elle sera disponible sous peu.',
      status: 'processing'
    });

    // Traitement asynchrone en arri√®re-plan
    setImmediate(async () => {
      try {
        // Stocker l'image imm√©diatement (plus petit, plus rapide)
        const imageFileId = await storeFileInGridFSOptimized(imageFile, gridFSBucketImage);

        // Stocker la vid√©o originale
        const videoFileId = await storeFileInGridFSOptimized(videoFile, gridFSBucketVideo);

        // Cr√©er l'enregistrement vid√©o en base
        const newVideo = new Video({
          title,
          categoryId,
          part,
          isPaid: isPaid === 'true',
          description,
          videoFileId,
          imageFileId,
          isProcessed: false,
          processingFailed: false,
          views: 0,
          createdAt: new Date(),
          size: videoFile.buffer.length
        });

        await newVideo.save();

        // Ajouter √† la queue de traitement pour compression
        videoProcessingQueue.push({
          videoId: newVideo._id,
          videoBuffer: videoFile.buffer,
          quality
        });

        // D√©marrer le traitement de la queue
        processVideoQueue();

        console.log(`‚úÖ Vid√©o ${newVideo._id} ajout√©e et mise en queue pour traitement`);

      } catch (error) {
        console.error('Erreur traitement arri√®re-plan vid√©o:', error);
      }
    });

  } catch (error) {
    console.error('Erreur ajout vid√©o:', error);
    res.status(500).json({ message: error.message });
  }
});

// Route optimis√©e pour la mise √† jour vid√©o
app.put('/api/update-video/:id', upload.fields([{ name: 'videoFile', maxCount: 1 }, { name: 'imageFile', maxCount: 1 }]), async (req, res) => {
  const { title, categoryId, part, isPaid, description, quality = 'medium' } = req.body;
  const videoId = req.params.id;

  try {
    const video = await Video.findById(videoId);
    if (!video) {
      return res.status(404).json({ message: 'Vid√©o non trouv√©e.' });
    }

    // Mise √† jour des m√©tadonn√©es imm√©diate
    video.title = title || video.title;
    video.categoryId = categoryId || video.categoryId;
    video.part = part || video.part;
    video.isPaid = isPaid === 'true' || video.isPaid;
    video.description = description || video.description;
    video.updatedAt = new Date();

    // R√©ponse rapide au client
    res.status(202).json({
      message: 'Vid√©o en cours de mise √† jour.',
      status: 'updating'
    });

    // Traitement des fichiers en arri√®re-plan si n√©cessaire
    setImmediate(async () => {
      try {
        let videoFileId = video.videoFileId;
        let imageFileId = video.imageFileId;

        if (req.files.imageFile) {
          imageFileId = await storeFileInGridFSOptimized(req.files.imageFile[0], gridFSBucketImage);
          video.imageFileId = imageFileId;
        }

        if (req.files.videoFile) {
          videoFileId = await storeFileInGridFSOptimized(req.files.videoFile[0], gridFSBucketVideo);
          video.videoFileId = videoFileId;
          video.isProcessed = false;
          video.size = req.files.videoFile[0].buffer.length;

          // Ajouter √† la queue pour recompression
          videoProcessingQueue.push({
            videoId: video._id,
            videoBuffer: req.files.videoFile[0].buffer,
            quality
          });

          processVideoQueue();
        }

        await video.save();

        // Invalider le cache pour cette vid√©o
        videoCache.delete(videoId);

        console.log(`‚úÖ Vid√©o ${videoId} mise √† jour avec succ√®s`);

      } catch (error) {
        console.error('Erreur mise √† jour arri√®re-plan:', error);
      }
    });

  } catch (error) {
    console.error('Erreur mise √† jour vid√©o:', error);
    res.status(500).json({ message: error.message });
  }
});

// Route optimis√©e pour supprimer une vid√©o
app.delete('/api/delete-video/:id', async (req, res) => {
  const videoId = req.params.id;

  try {
    const video = await Video.findById(videoId);
    if (!video) {
      return res.status(404).json({ message: 'Vid√©o non trouv√©e.' });
    }

    // Suppression en arri√®re-plan
    setImmediate(async () => {
      try {
        // Supprimer les fichiers de GridFS
        if (video.videoFileId) {
          await gridFSBucketVideo.delete(video.videoFileId);
        }
        if (video.compressedFileId) {
          await gridFSBucketVideo.delete(video.compressedFileId);
        }
        if (video.imageFileId) {
          await gridFSBucketImage.delete(video.imageFileId);
        }

        // Supprimer du cache
        videoCache.delete(videoId);

        console.log(`‚úÖ Fichiers vid√©o ${videoId} supprim√©s de GridFS`);
      } catch (error) {
        console.error('Erreur suppression fichiers GridFS:', error);
      }
    });

    // Supprimer de MongoDB imm√©diatement
    await Video.findByIdAndDelete(videoId);

    res.status(200).json({
      message: 'Vid√©o supprim√©e avec succ√®s!'
    });

  } catch (error) {
    console.error('Erreur suppression vid√©o:', error);
    res.status(500).json({ message: error.message });
  }
});

// Route optimis√©e pour r√©cup√©rer une vid√©o avec cache et streaming
app.get('/api/video/:id', async (req, res) => {
  const videoId = req.params.id;

  try {
    // V√©rifier le cache en premier
    const cacheKey = `video_${videoId}`;
    if (videoCache.has(cacheKey)) {
      const cachedData = videoCache.get(cacheKey);
      if (Date.now() - cachedData.timestamp < CACHE_TTL) {
        res.set({
          'Content-Type': 'video/mp4',
          'Cache-Control': 'public, max-age=3600',
          'Content-Length': cachedData.buffer.length
        });
        return res.send(cachedData.buffer);
      } else {
        videoCache.delete(cacheKey);
      }
    }

    const objectId = new mongoose.Types.ObjectId(videoId);
    
    // Essayer d'abord la version compress√©e
    let downloadStream;
    try {
      const video = await Video.findOne({
        $or: [
          { videoFileId: objectId },
          { compressedFileId: objectId }
        ]
      });

      if (video && video.compressedFileId && video.isProcessed) {
        downloadStream = gridFSBucketVideo.openDownloadStream(video.compressedFileId);
      } else {
        downloadStream = gridFSBucketVideo.openDownloadStream(objectId);
      }
    } catch {
      downloadStream = gridFSBucketVideo.openDownloadStream(objectId);
    }

    // Configuration des headers pour streaming optimis√©
    res.set({
      'Content-Type': 'video/mp4',
      'Cache-Control': 'public, max-age=3600',
      'Accept-Ranges': 'bytes'
    });

    // Gestion du streaming par chunks pour les gros fichiers
    const range = req.headers.range;
    if (range) {
      // Support du streaming par ranges (pour la lecture progressive)
      const parts = range.replace(/bytes=/, "").split("-");
      const start = parseInt(parts[0], 10);
      const end = parts[1] ? parseInt(parts[1], 10) : undefined;
      
      res.status(206);
      res.set({
        'Content-Range': `bytes ${start}-${end || 'end'}/total`,
        'Accept-Ranges': 'bytes'
      });
    }

    // Mettre √† jour les vues de mani√®re asynchrone
    setImmediate(async () => {
      try {
        await Video.findOneAndUpdate(
          { $or: [{ videoFileId: objectId }, { compressedFileId: objectId }] },
          { $inc: { views: 1 } }
        );
      } catch (error) {
        console.error('Erreur mise √† jour vues:', error);
      }
    });

    downloadStream.on('error', (err) => {
      console.error('Erreur streaming vid√©o:', err);
      if (!res.headersSent) {
        res.status(404).json({ message: 'Vid√©o introuvable' });
      }
    });

    // Cache des petites vid√©os en m√©moire
    let bufferChunks = [];
    let totalSize = 0;
    
    downloadStream.on('data', (chunk) => {
      totalSize += chunk.length;
      // Cache seulement les vid√©os < 50MB
      if (totalSize < 50 * 1024 * 1024) {
        bufferChunks.push(chunk);
      }
    });

    downloadStream.on('end', () => {
      // Mettre en cache les petites vid√©os
      if (totalSize < 50 * 1024 * 1024 && bufferChunks.length > 0) {
        const fullBuffer = Buffer.concat(bufferChunks);
        videoCache.set(cacheKey, {
          buffer: fullBuffer,
          timestamp: Date.now()
        });
      }
    });

    downloadStream.pipe(res);

  } catch (error) {
    console.error('Erreur r√©cup√©ration vid√©o:', error);
    if (!res.headersSent) {
      res.status(500).json({ message: 'Erreur serveur lors de la r√©cup√©ration de la vid√©o' });
    }
  }
});

// Route optimis√©e pour les images avec cache
app.get('/api/image/:id', async (req, res) => {
  const imageId = req.params.id;

  try {
    // Cache des images
    const cacheKey = `image_${imageId}`;
    if (videoCache.has(cacheKey)) {
      const cachedData = videoCache.get(cacheKey);
      if (Date.now() - cachedData.timestamp < CACHE_TTL) {
        res.set({
          'Content-Type': cachedData.contentType || 'image/jpeg',
          'Cache-Control': 'public, max-age=86400', // Cache 24h pour les images
          'Content-Length': cachedData.buffer.length
        });
        return res.send(cachedData.buffer);
      }
    }

    const objectId = new mongoose.Types.ObjectId(imageId);
    const downloadStream = gridFSBucketImage.openDownloadStream(objectId);

    // Headers pour images
    res.set({
      'Content-Type': 'image/jpeg',
      'Cache-Control': 'public, max-age=86400'
    });

    // Cache les images en m√©moire
    let imageBuffer = [];
    let contentType = 'image/jpeg';

    downloadStream.on('file', (file) => {
      contentType = file.metadata?.mimetype || 'image/jpeg';
      res.set('Content-Type', contentType);
    });

    downloadStream.on('data', (chunk) => {
      imageBuffer.push(chunk);
    });

    downloadStream.on('end', () => {
      const fullBuffer = Buffer.concat(imageBuffer);
      
      // Cache les images
      videoCache.set(cacheKey, {
        buffer: fullBuffer,
        contentType,
        timestamp: Date.now()
      });
    });

    downloadStream.on('error', (err) => {
      console.error('Erreur streaming image:', err);
      if (!res.headersSent) {
        res.status(404).json({ message: 'Image introuvable' });
      }
    });

    downloadStream.pipe(res);

  } catch (error) {
    console.error('Erreur r√©cup√©ration image:', error);
    if (!res.headersSent) {
      res.status(500).json({ message: 'Erreur serveur lors de la r√©cup√©ration de l\'image' });
    }
  }
});

// Route optimis√©e pour r√©cup√©rer toutes les vid√©os avec pagination et cache
app.get('/api/videos', async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const skip = (page - 1) * limit;
    const categoryFilter = req.query.category;
    const partFilter = req.query.part;

    // Construction du filtre de recherche
    let filter = {};
    if (categoryFilter) filter.categoryId = categoryFilter;
    if (partFilter) filter.part = partFilter;

    // Cache pour les listes de vid√©os
    const cacheKey = `videos_${JSON.stringify(filter)}_${page}_${limit}`;
    if (videoCache.has(cacheKey)) {
      const cachedData = videoCache.get(cacheKey);
      if (Date.now() - cachedData.timestamp < 5 * 60 * 1000) { // Cache 5 minutes
        return res.status(200).json(cachedData.data);
      }
    }

    // Requ√™te optimis√©e avec index
    const videos = await Video.find(filter)
      .sort({ views: -1, createdAt: -1 }) // Trier par popularit√© puis date
      .skip(skip)
      .limit(limit)
      .select('title categoryId part isPaid description imageFileId videoFileId compressedFileId isProcessed views createdAt')
      .lean(); // Utiliser lean() pour de meilleures performances

    // Compter le total pour la pagination
    const total = await Video.countDocuments(filter);

    // Organiser par cat√©gorie
    const categoriesMap = {};

    for (let video of videos) {
      const categoryId = video.categoryId;

      if (!categoriesMap[categoryId]) {
        categoriesMap[categoryId] = {
          id: categoryId,
          name: categoryId,
          videos: []
        };
      }

      // Choisir l'URL vid√©o optimale
      const videoFileId = video.compressedFileId && video.isProcessed 
        ? video.compressedFileId 
        : video.videoFileId;

      const imageUrl = `/api/image/${video.imageFileId}`;
      const videoUrl = `/api/video/${videoFileId}`;

      categoriesMap[categoryId].videos.push({
        id: video._id.toString(),
        title: video.title,
        isPaid: video.isPaid,
        categoryId: categoryId,
        part: video.part,
        image: imageUrl,
        views: video.views || 0,
        isProcessed: video.isProcessed || false,
        createdAt: video.createdAt,
        details: {
          title: video.description?.title || 'Pas de titre',
          video: videoUrl,
          description: video.description?.description || 'Pas de description'
        }
      });
    }

    const categories = Object.values(categoriesMap);

    const response = {
      categories,
      pagination: {
        current: page,
        total: Math.ceil(total / limit),
        count: videos.length,
        totalVideos: total
      }
    };

    // Mettre en cache la r√©ponse
    videoCache.set(cacheKey, {
      data: response,
      timestamp: Date.now()
    });

    res.status(200).json(response);

  } catch (error) {
    console.error('Erreur r√©cup√©ration vid√©os:', error);
    res.status(500).json({ message: 'Erreur interne lors de la r√©cup√©ration des vid√©os' });
  }
});

// Route pour obtenir les statistiques des vid√©os
app.get('/api/video-stats', async (req, res) => {
  try {
    const stats = await Video.aggregate([
      {
        $group: {
          _id: null,
          totalVideos: { $sum: 1 },
          totalViews: { $sum: '$views' },
          processedVideos: {
            $sum: { $cond: ['$isProcessed', 1, 0] }
          },
          pendingVideos: {
            $sum: { $cond: ['$isProcessed', 0, 1] }
          }
        }
      }
    ]);

    const categoryStats = await Video.aggregate([
      {
        $group: {
          _id: '$categoryId',
          count: { $sum: 1 },
          totalViews: { $sum: '$views' }
        }
      }
    ]);

    res.status(200).json({
      global: stats[0] || { totalVideos: 0, totalViews: 0, processedVideos: 0, pendingVideos: 0 },
      categories: categoryStats,
      queueLength: videoProcessingQueue.length,
      cacheSize: videoCache.size
    });

  } catch (error) {
    console.error('Erreur r√©cup√©ration stats:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration des statistiques' });
  }
});

// Route pour vider le cache manuellement
app.post('/api/clear-cache', (req, res) => {
  videoCache.clear();
  res.status(200).json({ message: 'Cache vid√© avec succ√®s', cacheSize: videoCache.size });
});

// Middleware pour g√©rer les erreurs globalement
app.use((error, req, res, next) => {
  console.error('Erreur globale:', error);
  if (!res.headersSent) {
    res.status(500).json({ message: 'Erreur interne du serveur' });
  }
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë Arr√™t du serveur en cours...');
  server.close(() => {
    console.log('‚úÖ Serveur arr√™t√© proprement');
    mongoose.connection.close(() => {
      console.log('‚úÖ Connexion MongoDB ferm√©e');
      process.exit(0);
    });
  });
});

// Lancement du serveur avec optimisations
server.listen(PORT, () => {
  console.log(`üöÄ Serveur optimis√© lanc√© sur le port ${PORT}`);
  console.log(`üìä Configuration:
  - Cache TTL: ${CACHE_TTL / 1000 / 60} minutes
  - Cache Size: ${CACHE_SIZE} vid√©os max
  - Pool MongoDB: 5-20 connexions
  - Compression: Activ√©e avec pr√©sets rapides
  - Traitement: En arri√®re-plan avec queue`);
});
